# coding: utf-8

"""
    Penguin Statistics - REST APIs

    Backend APIs for Arknights drop rate statistics website 'Penguin Statistics': https://penguin-stats.io/  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: alvissreimu@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Stage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ap_cost': 'int',
        'code': 'str',
        'code_i18n': 'dict(str, str)',
        'drop_infos': 'list[DropInfo]',
        'extra_drop': 'list[str]',
        'is_gacha': 'bool',
        'normal_drop': 'list[str]',
        'special_drop': 'list[str]',
        'stage_id': 'str',
        'stage_type': 'str',
        'zone_id': 'str'
    }

    attribute_map = {
        'ap_cost': 'apCost',
        'code': 'code',
        'code_i18n': 'code_i18n',
        'drop_infos': 'dropInfos',
        'extra_drop': 'extraDrop',
        'is_gacha': 'isGacha',
        'normal_drop': 'normalDrop',
        'special_drop': 'specialDrop',
        'stage_id': 'stageId',
        'stage_type': 'stageType',
        'zone_id': 'zoneId'
    }

    def __init__(self, ap_cost=None, code=None, code_i18n=None, drop_infos=None, extra_drop=None, is_gacha=None, normal_drop=None, special_drop=None, stage_id=None, stage_type=None, zone_id=None):  # noqa: E501
        """Stage - a model defined in Swagger"""  # noqa: E501

        self._ap_cost = None
        self._code = None
        self._code_i18n = None
        self._drop_infos = None
        self._extra_drop = None
        self._is_gacha = None
        self._normal_drop = None
        self._special_drop = None
        self._stage_id = None
        self._stage_type = None
        self._zone_id = None
        self.discriminator = None

        if ap_cost is not None:
            self.ap_cost = ap_cost
        if code is not None:
            self.code = code
        if code_i18n is not None:
            self.code_i18n = code_i18n
        if drop_infos is not None:
            self.drop_infos = drop_infos
        if extra_drop is not None:
            self.extra_drop = extra_drop
        if is_gacha is not None:
            self.is_gacha = is_gacha
        if normal_drop is not None:
            self.normal_drop = normal_drop
        if special_drop is not None:
            self.special_drop = special_drop
        if stage_id is not None:
            self.stage_id = stage_id
        if stage_type is not None:
            self.stage_type = stage_type
        if zone_id is not None:
            self.zone_id = zone_id

    @property
    def ap_cost(self):
        """Gets the ap_cost of this Stage.  # noqa: E501


        :return: The ap_cost of this Stage.  # noqa: E501
        :rtype: int
        """
        return self._ap_cost

    @ap_cost.setter
    def ap_cost(self, ap_cost):
        """Sets the ap_cost of this Stage.


        :param ap_cost: The ap_cost of this Stage.  # noqa: E501
        :type: int
        """

        self._ap_cost = ap_cost

    @property
    def code(self):
        """Gets the code of this Stage.  # noqa: E501


        :return: The code of this Stage.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Stage.


        :param code: The code of this Stage.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def code_i18n(self):
        """Gets the code_i18n of this Stage.  # noqa: E501


        :return: The code_i18n of this Stage.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._code_i18n

    @code_i18n.setter
    def code_i18n(self, code_i18n):
        """Sets the code_i18n of this Stage.


        :param code_i18n: The code_i18n of this Stage.  # noqa: E501
        :type: dict(str, str)
        """

        self._code_i18n = code_i18n

    @property
    def drop_infos(self):
        """Gets the drop_infos of this Stage.  # noqa: E501


        :return: The drop_infos of this Stage.  # noqa: E501
        :rtype: list[DropInfo]
        """
        return self._drop_infos

    @drop_infos.setter
    def drop_infos(self, drop_infos):
        """Sets the drop_infos of this Stage.


        :param drop_infos: The drop_infos of this Stage.  # noqa: E501
        :type: list[DropInfo]
        """

        self._drop_infos = drop_infos

    @property
    def extra_drop(self):
        """Gets the extra_drop of this Stage.  # noqa: E501


        :return: The extra_drop of this Stage.  # noqa: E501
        :rtype: list[str]
        """
        return self._extra_drop

    @extra_drop.setter
    def extra_drop(self, extra_drop):
        """Sets the extra_drop of this Stage.


        :param extra_drop: The extra_drop of this Stage.  # noqa: E501
        :type: list[str]
        """

        self._extra_drop = extra_drop

    @property
    def is_gacha(self):
        """Gets the is_gacha of this Stage.  # noqa: E501


        :return: The is_gacha of this Stage.  # noqa: E501
        :rtype: bool
        """
        return self._is_gacha

    @is_gacha.setter
    def is_gacha(self, is_gacha):
        """Sets the is_gacha of this Stage.


        :param is_gacha: The is_gacha of this Stage.  # noqa: E501
        :type: bool
        """

        self._is_gacha = is_gacha

    @property
    def normal_drop(self):
        """Gets the normal_drop of this Stage.  # noqa: E501


        :return: The normal_drop of this Stage.  # noqa: E501
        :rtype: list[str]
        """
        return self._normal_drop

    @normal_drop.setter
    def normal_drop(self, normal_drop):
        """Sets the normal_drop of this Stage.


        :param normal_drop: The normal_drop of this Stage.  # noqa: E501
        :type: list[str]
        """

        self._normal_drop = normal_drop

    @property
    def special_drop(self):
        """Gets the special_drop of this Stage.  # noqa: E501


        :return: The special_drop of this Stage.  # noqa: E501
        :rtype: list[str]
        """
        return self._special_drop

    @special_drop.setter
    def special_drop(self, special_drop):
        """Sets the special_drop of this Stage.


        :param special_drop: The special_drop of this Stage.  # noqa: E501
        :type: list[str]
        """

        self._special_drop = special_drop

    @property
    def stage_id(self):
        """Gets the stage_id of this Stage.  # noqa: E501


        :return: The stage_id of this Stage.  # noqa: E501
        :rtype: str
        """
        return self._stage_id

    @stage_id.setter
    def stage_id(self, stage_id):
        """Sets the stage_id of this Stage.


        :param stage_id: The stage_id of this Stage.  # noqa: E501
        :type: str
        """

        self._stage_id = stage_id

    @property
    def stage_type(self):
        """Gets the stage_type of this Stage.  # noqa: E501


        :return: The stage_type of this Stage.  # noqa: E501
        :rtype: str
        """
        return self._stage_type

    @stage_type.setter
    def stage_type(self, stage_type):
        """Sets the stage_type of this Stage.


        :param stage_type: The stage_type of this Stage.  # noqa: E501
        :type: str
        """

        self._stage_type = stage_type

    @property
    def zone_id(self):
        """Gets the zone_id of this Stage.  # noqa: E501


        :return: The zone_id of this Stage.  # noqa: E501
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this Stage.


        :param zone_id: The zone_id of this Stage.  # noqa: E501
        :type: str
        """

        self._zone_id = zone_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Stage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
