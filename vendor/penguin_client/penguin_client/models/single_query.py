# coding: utf-8

"""
    Penguin Statistics - REST APIs

    Backend APIs for Arknights drop rate statistics website 'Penguin Statistics': https://penguin-stats.io/  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: alvissreimu@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SingleQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end': 'int',
        'interval': 'int',
        'is_personal': 'bool',
        'item_ids': 'list[str]',
        'server': 'str',
        'stage_id': 'str',
        'start': 'int'
    }

    attribute_map = {
        'end': 'end',
        'interval': 'interval',
        'is_personal': 'isPersonal',
        'item_ids': 'itemIds',
        'server': 'server',
        'stage_id': 'stageId',
        'start': 'start'
    }

    def __init__(self, end=None, interval=None, is_personal=None, item_ids=None, server=None, stage_id=None, start=None):  # noqa: E501
        """SingleQuery - a model defined in Swagger"""  # noqa: E501

        self._end = None
        self._interval = None
        self._is_personal = None
        self._item_ids = None
        self._server = None
        self._stage_id = None
        self._start = None
        self.discriminator = None

        if end is not None:
            self.end = end
        if interval is not None:
            self.interval = interval
        if is_personal is not None:
            self.is_personal = is_personal
        if item_ids is not None:
            self.item_ids = item_ids
        if server is not None:
            self.server = server
        if stage_id is not None:
            self.stage_id = stage_id
        if start is not None:
            self.start = start

    @property
    def end(self):
        """Gets the end of this SingleQuery.  # noqa: E501

        The end time of the query time range. Nullable.  # noqa: E501

        :return: The end of this SingleQuery.  # noqa: E501
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this SingleQuery.

        The end time of the query time range. Nullable.  # noqa: E501

        :param end: The end of this SingleQuery.  # noqa: E501
        :type: int
        """

        self._end = end

    @property
    def interval(self):
        """Gets the interval of this SingleQuery.  # noqa: E501

        If null, then this query will be \"matrix query\"; Otherwise, it will be \"trend query\" based on the given interval (the length of each section, unit is millisecond).  # noqa: E501

        :return: The interval of this SingleQuery.  # noqa: E501
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this SingleQuery.

        If null, then this query will be \"matrix query\"; Otherwise, it will be \"trend query\" based on the given interval (the length of each section, unit is millisecond).  # noqa: E501

        :param interval: The interval of this SingleQuery.  # noqa: E501
        :type: int
        """

        self._interval = interval

    @property
    def is_personal(self):
        """Gets the is_personal of this SingleQuery.  # noqa: E501

        Indicate whether showing personal data.  # noqa: E501

        :return: The is_personal of this SingleQuery.  # noqa: E501
        :rtype: bool
        """
        return self._is_personal

    @is_personal.setter
    def is_personal(self, is_personal):
        """Sets the is_personal of this SingleQuery.

        Indicate whether showing personal data.  # noqa: E501

        :param is_personal: The is_personal of this SingleQuery.  # noqa: E501
        :type: bool
        """

        self._is_personal = is_personal

    @property
    def item_ids(self):
        """Gets the item_ids of this SingleQuery.  # noqa: E501

        Result filter by itemIds. If empty, no filter will be apllied. Otherwise, only items in this list will show in the result.  # noqa: E501

        :return: The item_ids of this SingleQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._item_ids

    @item_ids.setter
    def item_ids(self, item_ids):
        """Sets the item_ids of this SingleQuery.

        Result filter by itemIds. If empty, no filter will be apllied. Otherwise, only items in this list will show in the result.  # noqa: E501

        :param item_ids: The item_ids of this SingleQuery.  # noqa: E501
        :type: list[str]
        """

        self._item_ids = item_ids

    @property
    def server(self):
        """Gets the server of this SingleQuery.  # noqa: E501

        The server to be queried. Cannot be null.  # noqa: E501

        :return: The server of this SingleQuery.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this SingleQuery.

        The server to be queried. Cannot be null.  # noqa: E501

        :param server: The server of this SingleQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["CN", "US", "JP", "KR"]  # noqa: E501
        if server not in allowed_values:
            raise ValueError(
                "Invalid value for `server` ({0}), must be one of {1}"  # noqa: E501
                .format(server, allowed_values)
            )

        self._server = server

    @property
    def stage_id(self):
        """Gets the stage_id of this SingleQuery.  # noqa: E501

        The stage to be queried. Cannot be blank.  # noqa: E501

        :return: The stage_id of this SingleQuery.  # noqa: E501
        :rtype: str
        """
        return self._stage_id

    @stage_id.setter
    def stage_id(self, stage_id):
        """Sets the stage_id of this SingleQuery.

        The stage to be queried. Cannot be blank.  # noqa: E501

        :param stage_id: The stage_id of this SingleQuery.  # noqa: E501
        :type: str
        """

        self._stage_id = stage_id

    @property
    def start(self):
        """Gets the start of this SingleQuery.  # noqa: E501

        The start time of the query time range. Nullable.  # noqa: E501

        :return: The start of this SingleQuery.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SingleQuery.

        The start time of the query time range. Nullable.  # noqa: E501

        :param start: The start of this SingleQuery.  # noqa: E501
        :type: int
        """

        self._start = start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SingleQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SingleQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
