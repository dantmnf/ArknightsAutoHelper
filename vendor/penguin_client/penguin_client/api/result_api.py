# coding: utf-8

"""
    Penguin Statistics - REST APIs

    Backend APIs for Arknights drop rate statistics website 'Penguin Statistics': https://penguin-stats.io/  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: alvissreimu@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from penguin_client.api_client import ApiClient


class ResultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def execute_advanced_queries_using_post(self, advanced_query_request, **kwargs):  # noqa: E501
        """Execute advanced queries  # noqa: E501

        Execute advanced queries in a batch and return the query results in an array.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_advanced_queries_using_post(advanced_query_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdvancedQueryRequest advanced_query_request: advancedQueryRequest (required)
        :return: AdvancedQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_advanced_queries_using_post_with_http_info(advanced_query_request, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_advanced_queries_using_post_with_http_info(advanced_query_request, **kwargs)  # noqa: E501
            return data

    def execute_advanced_queries_using_post_with_http_info(self, advanced_query_request, **kwargs):  # noqa: E501
        """Execute advanced queries  # noqa: E501

        Execute advanced queries in a batch and return the query results in an array.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_advanced_queries_using_post_with_http_info(advanced_query_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdvancedQueryRequest advanced_query_request: advancedQueryRequest (required)
        :return: AdvancedQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['advanced_query_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_advanced_queries_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'advanced_query_request' is set
        if ('advanced_query_request' not in params or
                params['advanced_query_request'] is None):
            raise ValueError("Missing the required parameter `advanced_query_request` when calling `execute_advanced_queries_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'advanced_query_request' in params:
            body_params = params['advanced_query_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/result/advanced', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdvancedQueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_segmented_drop_results_using_get(self, **kwargs):  # noqa: E501
        """Get the segmented Result Matrix for all Items and Stages  # noqa: E501

        Return the segmented Matrix results of server `server` with granularity of `interval_day` days in the recent `range_day` days.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_segmented_drop_results_using_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int interval: The length of each section. Unit is \"millisecond\".
        :param int range: The total length of the time range used this query. The start time will be calculated using current time minus this value. Unit is \"millisecond\".
        :param str server: Indicate which server you want to query. Default is CN.
        :return: TrendQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_segmented_drop_results_using_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_segmented_drop_results_using_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_segmented_drop_results_using_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get the segmented Result Matrix for all Items and Stages  # noqa: E501

        Return the segmented Matrix results of server `server` with granularity of `interval_day` days in the recent `range_day` days.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_segmented_drop_results_using_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int interval: The length of each section. Unit is \"millisecond\".
        :param int range: The total length of the time range used this query. The start time will be calculated using current time minus this value. Unit is \"millisecond\".
        :param str server: Indicate which server you want to query. Default is CN.
        :return: TrendQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interval', 'range', 'server']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_segmented_drop_results_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if 'range' in params:
            query_params.append(('range', params['range']))  # noqa: E501
        if 'server' in params:
            query_params.append(('server', params['server']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/result/trends', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrendQueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_matrix_using_get1(self, **kwargs):  # noqa: E501
        """Get the Result Matrix for all Stages and Items  # noqa: E501

        Return the Result Matrix in the \"lastest accumulatable time ranges\". Detailed instructions can be found at: https://developer.penguin-stats.io/docs/api-v2-instruction/matrix-api  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_matrix_using_get1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_personal: Whether to see personal drop matrix or not. Default to be false.
        :param str server: Indicate which server you want to query. Default is CN.
        :param bool show_closed_zones: Whether showing closed stages or not. Default to be false.
        :return: MatrixQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_matrix_using_get1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_matrix_using_get1_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_matrix_using_get1_with_http_info(self, **kwargs):  # noqa: E501
        """Get the Result Matrix for all Stages and Items  # noqa: E501

        Return the Result Matrix in the \"lastest accumulatable time ranges\". Detailed instructions can be found at: https://developer.penguin-stats.io/docs/api-v2-instruction/matrix-api  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_matrix_using_get1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_personal: Whether to see personal drop matrix or not. Default to be false.
        :param str server: Indicate which server you want to query. Default is CN.
        :param bool show_closed_zones: Whether showing closed stages or not. Default to be false.
        :return: MatrixQueryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_personal', 'server', 'show_closed_zones']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_matrix_using_get1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'is_personal' in params:
            query_params.append(('is_personal', params['is_personal']))  # noqa: E501
        if 'server' in params:
            query_params.append(('server', params['server']))  # noqa: E501
        if 'show_closed_zones' in params:
            query_params.append(('show_closed_zones', params['show_closed_zones']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/result/matrix', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MatrixQueryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
