# coding: utf-8

"""
    Penguin Statistics - REST APIs

    Backend APIs for Arknights drop rate statistics website 'Penguin Statistics': https://penguin-stats.io/  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: alvissreimu@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from penguin_client.api_client import ApiClient


class ReportApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def recall_personal_report_using_post(self, recall_last_report_request, **kwargs):  # noqa: E501
        """Recall the last Report  # noqa: E501

        Recall the last Drop Report by providing its hash value. Notice that you can only recall the *last* report, which in addition will also expire after 24 hours.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recall_personal_report_using_post(recall_last_report_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RecallLastReportRequest recall_last_report_request: recallLastReportRequest (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recall_personal_report_using_post_with_http_info(recall_last_report_request, **kwargs)  # noqa: E501
        else:
            (data) = self.recall_personal_report_using_post_with_http_info(recall_last_report_request, **kwargs)  # noqa: E501
            return data

    def recall_personal_report_using_post_with_http_info(self, recall_last_report_request, **kwargs):  # noqa: E501
        """Recall the last Report  # noqa: E501

        Recall the last Drop Report by providing its hash value. Notice that you can only recall the *last* report, which in addition will also expire after 24 hours.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recall_personal_report_using_post_with_http_info(recall_last_report_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RecallLastReportRequest recall_last_report_request: recallLastReportRequest (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recall_last_report_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recall_personal_report_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'recall_last_report_request' is set
        if ('recall_last_report_request' not in params or
                params['recall_last_report_request'] is None):
            raise ValueError("Missing the required parameter `recall_last_report_request` when calling `recall_personal_report_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'recall_last_report_request' in params:
            body_params = params['recall_last_report_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/report/recall', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_single_report_using_post1(self, single_report_request, **kwargs):  # noqa: E501
        """Submit a drop report  # noqa: E501

        Detailed instructions can be found at: https://developer.penguin-stats.io/docs/report-api  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_single_report_using_post1(single_report_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SingleReportRequest single_report_request: singleReportRequest (required)
        :return: SingleReportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_single_report_using_post1_with_http_info(single_report_request, **kwargs)  # noqa: E501
        else:
            (data) = self.save_single_report_using_post1_with_http_info(single_report_request, **kwargs)  # noqa: E501
            return data

    def save_single_report_using_post1_with_http_info(self, single_report_request, **kwargs):  # noqa: E501
        """Submit a drop report  # noqa: E501

        Detailed instructions can be found at: https://developer.penguin-stats.io/docs/report-api  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_single_report_using_post1_with_http_info(single_report_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SingleReportRequest single_report_request: singleReportRequest (required)
        :return: SingleReportResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['single_report_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_single_report_using_post1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'single_report_request' is set
        if ('single_report_request' not in params or
                params['single_report_request'] is None):
            raise ValueError("Missing the required parameter `single_report_request` when calling `save_single_report_using_post1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'single_report_request' in params:
            body_params = params['single_report_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/report', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SingleReportResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
