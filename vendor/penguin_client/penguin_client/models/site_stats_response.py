# coding: utf-8

"""
    Penguin Statistics - REST APIs

    Backend APIs for Arknights drop rate statistics website 'Penguin Statistics': https://penguin-stats.io/  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: alvissreimu@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SiteStatsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error': 'str',
        'total_ap_cost': 'int',
        'total_item_quantities': 'list[ItemQuantity]',
        'total_stage_times': 'list[StageTimes]',
        'total_stage_times_24h': 'list[StageTimes]'
    }

    attribute_map = {
        'error': 'error',
        'total_ap_cost': 'totalApCost',
        'total_item_quantities': 'totalItemQuantities',
        'total_stage_times': 'totalStageTimes',
        'total_stage_times_24h': 'totalStageTimes_24h'
    }

    def __init__(self, error=None, total_ap_cost=None, total_item_quantities=None, total_stage_times=None, total_stage_times_24h=None):  # noqa: E501
        """SiteStatsResponse - a model defined in Swagger"""  # noqa: E501

        self._error = None
        self._total_ap_cost = None
        self._total_item_quantities = None
        self._total_stage_times = None
        self._total_stage_times_24h = None
        self.discriminator = None

        if error is not None:
            self.error = error
        if total_ap_cost is not None:
            self.total_ap_cost = total_ap_cost
        if total_item_quantities is not None:
            self.total_item_quantities = total_item_quantities
        if total_stage_times is not None:
            self.total_stage_times = total_stage_times
        if total_stage_times_24h is not None:
            self.total_stage_times_24h = total_stage_times_24h

    @property
    def error(self):
        """Gets the error of this SiteStatsResponse.  # noqa: E501

        It will show up when there is something wrong with the website statistic query.  # noqa: E501

        :return: The error of this SiteStatsResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this SiteStatsResponse.

        It will show up when there is something wrong with the website statistic query.  # noqa: E501

        :param error: The error of this SiteStatsResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def total_ap_cost(self):
        """Gets the total_ap_cost of this SiteStatsResponse.  # noqa: E501

        The total AP cost for all stages that have been played  # noqa: E501

        :return: The total_ap_cost of this SiteStatsResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_ap_cost

    @total_ap_cost.setter
    def total_ap_cost(self, total_ap_cost):
        """Sets the total_ap_cost of this SiteStatsResponse.

        The total AP cost for all stages that have been played  # noqa: E501

        :param total_ap_cost: The total_ap_cost of this SiteStatsResponse.  # noqa: E501
        :type: int
        """

        self._total_ap_cost = total_ap_cost

    @property
    def total_item_quantities(self):
        """Gets the total_item_quantities of this SiteStatsResponse.  # noqa: E501

        The number of times each item has dropped  # noqa: E501

        :return: The total_item_quantities of this SiteStatsResponse.  # noqa: E501
        :rtype: list[ItemQuantity]
        """
        return self._total_item_quantities

    @total_item_quantities.setter
    def total_item_quantities(self, total_item_quantities):
        """Sets the total_item_quantities of this SiteStatsResponse.

        The number of times each item has dropped  # noqa: E501

        :param total_item_quantities: The total_item_quantities of this SiteStatsResponse.  # noqa: E501
        :type: list[ItemQuantity]
        """

        self._total_item_quantities = total_item_quantities

    @property
    def total_stage_times(self):
        """Gets the total_stage_times of this SiteStatsResponse.  # noqa: E501

        The number of times each stage has been played  # noqa: E501

        :return: The total_stage_times of this SiteStatsResponse.  # noqa: E501
        :rtype: list[StageTimes]
        """
        return self._total_stage_times

    @total_stage_times.setter
    def total_stage_times(self, total_stage_times):
        """Sets the total_stage_times of this SiteStatsResponse.

        The number of times each stage has been played  # noqa: E501

        :param total_stage_times: The total_stage_times of this SiteStatsResponse.  # noqa: E501
        :type: list[StageTimes]
        """

        self._total_stage_times = total_stage_times

    @property
    def total_stage_times_24h(self):
        """Gets the total_stage_times_24h of this SiteStatsResponse.  # noqa: E501

        The number of times each stage has been played in the last 24 hours  # noqa: E501

        :return: The total_stage_times_24h of this SiteStatsResponse.  # noqa: E501
        :rtype: list[StageTimes]
        """
        return self._total_stage_times_24h

    @total_stage_times_24h.setter
    def total_stage_times_24h(self, total_stage_times_24h):
        """Sets the total_stage_times_24h of this SiteStatsResponse.

        The number of times each stage has been played in the last 24 hours  # noqa: E501

        :param total_stage_times_24h: The total_stage_times_24h of this SiteStatsResponse.  # noqa: E501
        :type: list[StageTimes]
        """

        self._total_stage_times_24h = total_stage_times_24h

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteStatsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteStatsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
