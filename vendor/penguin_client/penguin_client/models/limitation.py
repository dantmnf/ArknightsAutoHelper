# coding: utf-8

"""
    Penguin Statistics - REST APIs

    Backend APIs for Arknights drop rate statistics website 'Penguin Statistics': https://penguin-stats.io/  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: alvissreimu@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Limitation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inheritance': 'list[str]',
        'item_quantity_bounds': 'list[ItemQuantityBounds]',
        'item_type_bounds': 'Bounds',
        'name': 'str'
    }

    attribute_map = {
        'inheritance': 'inheritance',
        'item_quantity_bounds': 'itemQuantityBounds',
        'item_type_bounds': 'itemTypeBounds',
        'name': 'name'
    }

    def __init__(self, inheritance=None, item_quantity_bounds=None, item_type_bounds=None, name=None):  # noqa: E501
        """Limitation - a model defined in Swagger"""  # noqa: E501

        self._inheritance = None
        self._item_quantity_bounds = None
        self._item_type_bounds = None
        self._name = None
        self.discriminator = None

        if inheritance is not None:
            self.inheritance = inheritance
        if item_quantity_bounds is not None:
            self.item_quantity_bounds = item_quantity_bounds
        if item_type_bounds is not None:
            self.item_type_bounds = item_type_bounds
        if name is not None:
            self.name = name

    @property
    def inheritance(self):
        """Gets the inheritance of this Limitation.  # noqa: E501


        :return: The inheritance of this Limitation.  # noqa: E501
        :rtype: list[str]
        """
        return self._inheritance

    @inheritance.setter
    def inheritance(self, inheritance):
        """Sets the inheritance of this Limitation.


        :param inheritance: The inheritance of this Limitation.  # noqa: E501
        :type: list[str]
        """

        self._inheritance = inheritance

    @property
    def item_quantity_bounds(self):
        """Gets the item_quantity_bounds of this Limitation.  # noqa: E501


        :return: The item_quantity_bounds of this Limitation.  # noqa: E501
        :rtype: list[ItemQuantityBounds]
        """
        return self._item_quantity_bounds

    @item_quantity_bounds.setter
    def item_quantity_bounds(self, item_quantity_bounds):
        """Sets the item_quantity_bounds of this Limitation.


        :param item_quantity_bounds: The item_quantity_bounds of this Limitation.  # noqa: E501
        :type: list[ItemQuantityBounds]
        """

        self._item_quantity_bounds = item_quantity_bounds

    @property
    def item_type_bounds(self):
        """Gets the item_type_bounds of this Limitation.  # noqa: E501


        :return: The item_type_bounds of this Limitation.  # noqa: E501
        :rtype: Bounds
        """
        return self._item_type_bounds

    @item_type_bounds.setter
    def item_type_bounds(self, item_type_bounds):
        """Sets the item_type_bounds of this Limitation.


        :param item_type_bounds: The item_type_bounds of this Limitation.  # noqa: E501
        :type: Bounds
        """

        self._item_type_bounds = item_type_bounds

    @property
    def name(self):
        """Gets the name of this Limitation.  # noqa: E501


        :return: The name of this Limitation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Limitation.


        :param name: The name of this Limitation.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Limitation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Limitation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
