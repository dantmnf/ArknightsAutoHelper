# coding: utf-8

"""
    Penguin Statistics - REST APIs

    Backend APIs for Arknights drop rate statistics website 'Penguin Statistics': https://penguin-stats.io/  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: alvissreimu@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SingleReportRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'drops': 'list[TypedDrop]',
        'server': 'str',
        'source': 'str',
        'stage_id': 'str',
        'version': 'str'
    }

    attribute_map = {
        'drops': 'drops',
        'server': 'server',
        'source': 'source',
        'stage_id': 'stageId',
        'version': 'version'
    }

    def __init__(self, drops=None, server=None, source=None, stage_id=None, version=None):  # noqa: E501
        """SingleReportRequest - a model defined in Swagger"""  # noqa: E501

        self._drops = None
        self._server = None
        self._source = None
        self._stage_id = None
        self._version = None
        self.discriminator = None

        if drops is not None:
            self.drops = drops
        if server is not None:
            self.server = server
        if source is not None:
            self.source = source
        if stage_id is not None:
            self.stage_id = stage_id
        if version is not None:
            self.version = version

    @property
    def drops(self):
        """Gets the drops of this SingleReportRequest.  # noqa: E501

        The list of dropped items.  # noqa: E501

        :return: The drops of this SingleReportRequest.  # noqa: E501
        :rtype: list[TypedDrop]
        """
        return self._drops

    @drops.setter
    def drops(self, drops):
        """Sets the drops of this SingleReportRequest.

        The list of dropped items.  # noqa: E501

        :param drops: The drops of this SingleReportRequest.  # noqa: E501
        :type: list[TypedDrop]
        """

        self._drops = drops

    @property
    def server(self):
        """Gets the server of this SingleReportRequest.  # noqa: E501

        The server of this drop. Cannot be blank.  # noqa: E501

        :return: The server of this SingleReportRequest.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this SingleReportRequest.

        The server of this drop. Cannot be blank.  # noqa: E501

        :param server: The server of this SingleReportRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["CN", "US", "JP", "KR"]  # noqa: E501
        if server not in allowed_values:
            raise ValueError(
                "Invalid value for `server` ({0}), must be one of {1}"  # noqa: E501
                .format(server, allowed_values)
            )

        self._server = server

    @property
    def source(self):
        """Gets the source of this SingleReportRequest.  # noqa: E501

        The source of this report. It is used to mark which website/app is sending this request. Nullable (not recommended).  # noqa: E501

        :return: The source of this SingleReportRequest.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SingleReportRequest.

        The source of this report. It is used to mark which website/app is sending this request. Nullable (not recommended).  # noqa: E501

        :param source: The source of this SingleReportRequest.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def stage_id(self):
        """Gets the stage_id of this SingleReportRequest.  # noqa: E501

        The stageId. Cannot be blank.  # noqa: E501

        :return: The stage_id of this SingleReportRequest.  # noqa: E501
        :rtype: str
        """
        return self._stage_id

    @stage_id.setter
    def stage_id(self, stage_id):
        """Sets the stage_id of this SingleReportRequest.

        The stageId. Cannot be blank.  # noqa: E501

        :param stage_id: The stage_id of this SingleReportRequest.  # noqa: E501
        :type: str
        """

        self._stage_id = stage_id

    @property
    def version(self):
        """Gets the version of this SingleReportRequest.  # noqa: E501

        The version of the website/app. Nullable (not recommended).  # noqa: E501

        :return: The version of this SingleReportRequest.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SingleReportRequest.

        The version of the website/app. Nullable (not recommended).  # noqa: E501

        :param version: The version of this SingleReportRequest.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SingleReportRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SingleReportRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
