# coding: utf-8

"""
    Penguin Statistics - REST APIs

    Backend APIs for Arknights drop rate statistics website 'Penguin Statistics': https://penguin-stats.io/  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: alvissreimu@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Zone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'close_time': 'int',
        'existence': 'dict(str, Existence)',
        'open_time': 'int',
        'stages': 'list[str]',
        'type': 'str',
        'zone_id': 'str',
        'zone_index': 'int',
        'zone_name': 'str',
        'zone_name_i18n': 'dict(str, str)'
    }

    attribute_map = {
        'close_time': 'closeTime',
        'existence': 'existence',
        'open_time': 'openTime',
        'stages': 'stages',
        'type': 'type',
        'zone_id': 'zoneId',
        'zone_index': 'zoneIndex',
        'zone_name': 'zoneName',
        'zone_name_i18n': 'zoneName_i18n'
    }

    def __init__(self, close_time=None, existence=None, open_time=None, stages=None, type=None, zone_id=None, zone_index=None, zone_name=None, zone_name_i18n=None):  # noqa: E501
        """Zone - a model defined in Swagger"""  # noqa: E501

        self._close_time = None
        self._existence = None
        self._open_time = None
        self._stages = None
        self._type = None
        self._zone_id = None
        self._zone_index = None
        self._zone_name = None
        self._zone_name_i18n = None
        self.discriminator = None

        if close_time is not None:
            self.close_time = close_time
        if existence is not None:
            self.existence = existence
        if open_time is not None:
            self.open_time = open_time
        if stages is not None:
            self.stages = stages
        if type is not None:
            self.type = type
        if zone_id is not None:
            self.zone_id = zone_id
        if zone_index is not None:
            self.zone_index = zone_index
        if zone_name is not None:
            self.zone_name = zone_name
        if zone_name_i18n is not None:
            self.zone_name_i18n = zone_name_i18n

    @property
    def close_time(self):
        """Gets the close_time of this Zone.  # noqa: E501


        :return: The close_time of this Zone.  # noqa: E501
        :rtype: int
        """
        return self._close_time

    @close_time.setter
    def close_time(self, close_time):
        """Sets the close_time of this Zone.


        :param close_time: The close_time of this Zone.  # noqa: E501
        :type: int
        """

        self._close_time = close_time

    @property
    def existence(self):
        """Gets the existence of this Zone.  # noqa: E501


        :return: The existence of this Zone.  # noqa: E501
        :rtype: dict(str, Existence)
        """
        return self._existence

    @existence.setter
    def existence(self, existence):
        """Sets the existence of this Zone.


        :param existence: The existence of this Zone.  # noqa: E501
        :type: dict(str, Existence)
        """

        self._existence = existence

    @property
    def open_time(self):
        """Gets the open_time of this Zone.  # noqa: E501


        :return: The open_time of this Zone.  # noqa: E501
        :rtype: int
        """
        return self._open_time

    @open_time.setter
    def open_time(self, open_time):
        """Sets the open_time of this Zone.


        :param open_time: The open_time of this Zone.  # noqa: E501
        :type: int
        """

        self._open_time = open_time

    @property
    def stages(self):
        """Gets the stages of this Zone.  # noqa: E501


        :return: The stages of this Zone.  # noqa: E501
        :rtype: list[str]
        """
        return self._stages

    @stages.setter
    def stages(self, stages):
        """Sets the stages of this Zone.


        :param stages: The stages of this Zone.  # noqa: E501
        :type: list[str]
        """

        self._stages = stages

    @property
    def type(self):
        """Gets the type of this Zone.  # noqa: E501


        :return: The type of this Zone.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Zone.


        :param type: The type of this Zone.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def zone_id(self):
        """Gets the zone_id of this Zone.  # noqa: E501


        :return: The zone_id of this Zone.  # noqa: E501
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this Zone.


        :param zone_id: The zone_id of this Zone.  # noqa: E501
        :type: str
        """

        self._zone_id = zone_id

    @property
    def zone_index(self):
        """Gets the zone_index of this Zone.  # noqa: E501


        :return: The zone_index of this Zone.  # noqa: E501
        :rtype: int
        """
        return self._zone_index

    @zone_index.setter
    def zone_index(self, zone_index):
        """Sets the zone_index of this Zone.


        :param zone_index: The zone_index of this Zone.  # noqa: E501
        :type: int
        """

        self._zone_index = zone_index

    @property
    def zone_name(self):
        """Gets the zone_name of this Zone.  # noqa: E501


        :return: The zone_name of this Zone.  # noqa: E501
        :rtype: str
        """
        return self._zone_name

    @zone_name.setter
    def zone_name(self, zone_name):
        """Sets the zone_name of this Zone.


        :param zone_name: The zone_name of this Zone.  # noqa: E501
        :type: str
        """

        self._zone_name = zone_name

    @property
    def zone_name_i18n(self):
        """Gets the zone_name_i18n of this Zone.  # noqa: E501


        :return: The zone_name_i18n of this Zone.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._zone_name_i18n

    @zone_name_i18n.setter
    def zone_name_i18n(self, zone_name_i18n):
        """Sets the zone_name_i18n of this Zone.


        :param zone_name_i18n: The zone_name_i18n of this Zone.  # noqa: E501
        :type: dict(str, str)
        """

        self._zone_name_i18n = zone_name_i18n

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Zone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Zone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
