# coding: utf-8

"""
    Penguin Statistics - REST APIs

    Backend APIs for Arknights drop rate statistics website 'Penguin Statistics': https://penguin-stats.io/  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: alvissreimu@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Item(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_time_point': 'int',
        'existence': 'dict(str, Existence)',
        'item_id': 'str',
        'item_type': 'str',
        'name': 'str',
        'name_i18n': 'dict(str, str)',
        'rarity': 'int',
        'sort_id': 'int',
        'sprite_coord': 'list[int]'
    }

    attribute_map = {
        'add_time_point': 'addTimePoint',
        'existence': 'existence',
        'item_id': 'itemId',
        'item_type': 'itemType',
        'name': 'name',
        'name_i18n': 'name_i18n',
        'rarity': 'rarity',
        'sort_id': 'sortId',
        'sprite_coord': 'spriteCoord'
    }

    def __init__(self, add_time_point=None, existence=None, item_id=None, item_type=None, name=None, name_i18n=None, rarity=None, sort_id=None, sprite_coord=None):  # noqa: E501
        """Item - a model defined in Swagger"""  # noqa: E501

        self._add_time_point = None
        self._existence = None
        self._item_id = None
        self._item_type = None
        self._name = None
        self._name_i18n = None
        self._rarity = None
        self._sort_id = None
        self._sprite_coord = None
        self.discriminator = None

        if add_time_point is not None:
            self.add_time_point = add_time_point
        if existence is not None:
            self.existence = existence
        if item_id is not None:
            self.item_id = item_id
        if item_type is not None:
            self.item_type = item_type
        if name is not None:
            self.name = name
        if name_i18n is not None:
            self.name_i18n = name_i18n
        if rarity is not None:
            self.rarity = rarity
        if sort_id is not None:
            self.sort_id = sort_id
        if sprite_coord is not None:
            self.sprite_coord = sprite_coord

    @property
    def add_time_point(self):
        """Gets the add_time_point of this Item.  # noqa: E501


        :return: The add_time_point of this Item.  # noqa: E501
        :rtype: int
        """
        return self._add_time_point

    @add_time_point.setter
    def add_time_point(self, add_time_point):
        """Sets the add_time_point of this Item.


        :param add_time_point: The add_time_point of this Item.  # noqa: E501
        :type: int
        """

        self._add_time_point = add_time_point

    @property
    def existence(self):
        """Gets the existence of this Item.  # noqa: E501

        The existence of the item in each server.  # noqa: E501

        :return: The existence of this Item.  # noqa: E501
        :rtype: dict(str, Existence)
        """
        return self._existence

    @existence.setter
    def existence(self, existence):
        """Sets the existence of this Item.

        The existence of the item in each server.  # noqa: E501

        :param existence: The existence of this Item.  # noqa: E501
        :type: dict(str, Existence)
        """

        self._existence = existence

    @property
    def item_id(self):
        """Gets the item_id of this Item.  # noqa: E501


        :return: The item_id of this Item.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Item.


        :param item_id: The item_id of this Item.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def item_type(self):
        """Gets the item_type of this Item.  # noqa: E501


        :return: The item_type of this Item.  # noqa: E501
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this Item.


        :param item_type: The item_type of this Item.  # noqa: E501
        :type: str
        """

        self._item_type = item_type

    @property
    def name(self):
        """Gets the name of this Item.  # noqa: E501


        :return: The name of this Item.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Item.


        :param name: The name of this Item.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_i18n(self):
        """Gets the name_i18n of this Item.  # noqa: E501


        :return: The name_i18n of this Item.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._name_i18n

    @name_i18n.setter
    def name_i18n(self, name_i18n):
        """Sets the name_i18n of this Item.


        :param name_i18n: The name_i18n of this Item.  # noqa: E501
        :type: dict(str, str)
        """

        self._name_i18n = name_i18n

    @property
    def rarity(self):
        """Gets the rarity of this Item.  # noqa: E501


        :return: The rarity of this Item.  # noqa: E501
        :rtype: int
        """
        return self._rarity

    @rarity.setter
    def rarity(self, rarity):
        """Sets the rarity of this Item.


        :param rarity: The rarity of this Item.  # noqa: E501
        :type: int
        """

        self._rarity = rarity

    @property
    def sort_id(self):
        """Gets the sort_id of this Item.  # noqa: E501


        :return: The sort_id of this Item.  # noqa: E501
        :rtype: int
        """
        return self._sort_id

    @sort_id.setter
    def sort_id(self, sort_id):
        """Sets the sort_id of this Item.


        :param sort_id: The sort_id of this Item.  # noqa: E501
        :type: int
        """

        self._sort_id = sort_id

    @property
    def sprite_coord(self):
        """Gets the sprite_coord of this Item.  # noqa: E501

        The position in the sprite image.  # noqa: E501

        :return: The sprite_coord of this Item.  # noqa: E501
        :rtype: list[int]
        """
        return self._sprite_coord

    @sprite_coord.setter
    def sprite_coord(self, sprite_coord):
        """Sets the sprite_coord of this Item.

        The position in the sprite image.  # noqa: E501

        :param sprite_coord: The sprite_coord of this Item.  # noqa: E501
        :type: list[int]
        """

        self._sprite_coord = sprite_coord

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Item, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Item):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
